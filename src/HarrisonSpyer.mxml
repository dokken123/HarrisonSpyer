<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   creationComplete="application1_creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" verticalAlign="top" />
	</s:layout>
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.FocusManager;
			
			import spark.components.VideoDisplay;
			
			private var _camV:Video;
			
			private var _netconn:NetConnection;
			
			private var _outputStream:NetStream;
			
			private var _netgroup:NetGroup;
			
			private var groupspec:GroupSpecifier;
			
			private var _fmsaddr:String = "rtmfp://qusi.org/harrisonspyer";
			
			//			private var _fmsaddr:String = "rtmfp://10.128.37.60/harrisonspyer";
			
			private var _streamName:String = "HARRISON_SPYER";
			
			private var _camera:Camera;
			private var _mic:Microphone;
			
			private var _msgChanged:Boolean = false;
			
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				this._camera = Camera.getCamera();
				if(this._camera){
					this._camera.setMode(320,240,10);
					this._camera.setQuality(30000,0);
					//					this._camera.setKeyFrameInterval(15);
				}
				this._mic = Microphone.getMicrophone();
				if(this._mic){
					this._mic.codec = SoundCodec.SPEEX;
					this._mic.encodeQuality = 10;
					this._mic.framesPerPacket = 1;
					this._mic.setSilenceLevel(0);
				}
				this.camVideo.maintainAspectRatio = true;
				this.camVideo.attachCamera(this._camera);
				
				this._netconn = new NetConnection();
				this._netconn.connect(this._fmsaddr);
				this._netconn.addEventListener(NetStatusEvent.NET_STATUS, this.connectHandler);	
				this.chatbox.textArea.editable = false;
				this.chatbox.textArea.height = 155;
				this.traceText("Application started");
			}
			
			protected function connectHandler(event:NetStatusEvent):void
			{
				// TODO Auto-generated method stub
				this.traceText(event.info.code);
				switch(event.info.code){
					case "NetConnection.Connect.Success":
						groupspec = new GroupSpecifier(this._streamName);
						groupspec.postingEnabled = true;
						groupspec.serverChannelEnabled = true;
						groupspec.multicastEnabled = true;
						this._netgroup = new NetGroup(this._netconn,groupspec.groupspecWithAuthorizations());
						this._netgroup.addEventListener(NetStatusEvent.NET_STATUS,this.onGroupStatus);
						
						this._outputStream = new NetStream(this._netconn,NetStream.DIRECT_CONNECTIONS);
						this._outputStream.audioReliable = true;
						this._outputStream.videoReliable = false;
						if(this._camera != null){
							this._outputStream.videoReliable = true;
							this._outputStream.attachCamera(this._camera);
						}
						this._outputStream.attachAudio(null);
						//						this._outputStream.publish(this._netconn.nearID);
						this._outputStream.publish(this._streamName);
						this._outputStream.addEventListener(NetStatusEvent.NET_STATUS,this.onNetstreamStatus);
						break;
					case "NetGroup.Connect.Success":
						//						this._netgroup.post(camMsgToNeighbors());
						this.btnSendMsg.enabled = true;
						break;
				}
			}			
			
			protected function onNetstreamStatus(event:NetStatusEvent):void
			{
				// TODO Auto-generated method stub
				if(event.info.code == "NetStream.Publish.BadName"){
					mx.controls.Alert.show("Someone is already publishing the video...");
				}
				this.traceText(event.info.code);
			}
			
			protected function onGroupStatus(event:NetStatusEvent):void
			{
				// TODO Auto-generated method stub
				
				switch(event.info.code){
					case "NetGroup.Neighbor.Connect":
						var peerId:String = event.info.peerID;
						
						var instream:NetStream = new NetStream(this._netconn,peerId);
						instream.receiveAudio(true);
						
						instream.play(this._streamName);
						instream.addEventListener(NetStatusEvent.NET_STATUS,this.onInSteamStatus);
						var peerVideo:spark.components.VideoDisplay = this.camGroup.getChildByName("video_"+peerId) as spark.components.VideoDisplay;
						this.traceText(event.info.peerID + " Connected as a peer");
						if(peerVideo == null){
							var video:Video = new Video(320,240);
							video.attachNetStream(instream);
							video.smoothing = true;
							var videoDisplay:spark.components.VideoDisplay = new spark.components.VideoDisplay();
							videoDisplay.name = "video_" + peerId;
							videoDisplay.width = 320;
							videoDisplay.height = 240;
							videoDisplay.includeInLayout = false;
							videoDisplay.visible = false;
							videoDisplay.addChild(video);
							this.camGroup.addElement(videoDisplay);
							var intv:uint = setInterval(function():void{
								if(instream.info.videoByteCount > 0){
									if(videoDisplay != null){
										videoDisplay.includeInLayout = true;
										videoDisplay.visible = true;
									}
									clearInterval(intv);
								}			
							},2000);
						}
						break;
					case "NetGroup.Neighbor.Disconnect":
						var peerId2:String = event.info.peerID;
						var peerVideo2:spark.components.VideoDisplay = this.camGroup.getChildByName("video_"+peerId2) as spark.components.VideoDisplay;
						if(peerVideo2 != null){
							this.camGroup.removeElement(peerVideo2);
						}
						this.traceText(event.info.peerID + " Disconnected");
						break;
					case "NetGroup.Posting.Notify":
					case "NetGroup.SendTo.Notify":
						var msg:Object = event.info.message;
						switch(msg.label){
							case "msg":
								this._msgChanged = true;
								this.addMessage(msg.user,msg.text);
								break;
							case "addcam":
								break;								
						}
						break;
				}
				
			}
			
			protected function onInSteamStatus(event:NetStatusEvent):void
			{
				// TODO Auto-generated method stub
				this.traceText(event.info.description);
				switch(event.info.code){
					case "NetStream.Play.Start":
						break;
					case "NetStream.Play.UnpublishNotify":
						break;
				}
			}
			
			protected function openMuteMic():void{
				if(!this.chkMuteMic.selected){
					this._outputStream.attachAudio(this._mic);	
				}else{
					this._outputStream.attachAudio(null);
				}
			}
			
			private function trimString(str:String):String{
				if(str.charAt(0) == " "){
					str = str.substr(1);
				}
				if(str.charAt(str.length - 1) == ""){
					str = str.substr(0,str.length - 1);
				}
				return str;
			}
			
			protected function sendMsg():void{
				var usrName:String = trimString(this.txtUserName.text);
				var message:String = trimString(this.txtMessage.text);
				
				if(usrName.length == 0){
					Alert.show("Please input a name");
					this.focusManager.setFocus(this.txtUserName);
					return;
				}
				if(message.length == 0){
					Alert.show("Please input some text");
					this.focusManager.setFocus(this.txtMessage);
					return;
				}
				var msg:Object = new Object();
				msg.label = "msg";
				msg.text = message;
				msg.user = usrName;
				this._netgroup.post(msg);
				this.addMessage(msg.user,msg.text);
				this.txtMessage.text = "";
			}
			
			private function addMessage(user:String,msg:String):void{
				this.chatbox.htmlText += "<FONT COLOR='#FF0000'>" + user + "</FONT>:" + msg + "\n";
				this.chatbox.textArea.validateNow();
				this.chatbox.textArea.verticalScrollPosition = this.chatbox.textArea.maxVerticalScrollPosition;
			}
			
			private function traceText(msg:String):void{
				if(msg != null){
					this.txtTrace.text += msg + "\n";
				}
			}
			
			protected function radAudioQuality_itemClickHandler(event:ItemClickEvent):void
			{
				// TODO Auto-generated method stub
				switch(event.item){
					case "low":
						this._mic.encodeQuality = 2;
						this._mic.framesPerPacket = 4;
						break;
					case "medium":
						this._mic.encodeQuality = 6;
						this._mic.framesPerPacket = 2;
						break;
					case "high":
						this._mic.encodeQuality = 10;
						this._mic.framesPerPacket = 1;
						break;
				}
			}
			
			
			protected function radVideoQuality_itemClickHandler(event:ItemClickEvent):void
			{
				// TODO Auto-generated method stub
				switch(event.item){
					case "low":
						this._camera.setMode(240,160,30);
						this._camera.setQuality(0,50);
						break;
					case "medium":
						this._camera.setMode(320,240,30);
						this._camera.setQuality(0,50);
						break;
					case "high":
						this._camera.setMode(320,240,10);
						this._camera.setQuality(30000,0);
						break;
				}
			}
			
			protected function txtMessage_keyUpHandler(event:KeyboardEvent):void
			{
				// TODO Auto-generated method stub
				if(event.keyCode == Keyboard.ENTER){
					this.sendMsg();
				}
			}
			
			protected function txtMessage_focusInHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				this.txtMessage.text = "";
				this.txtMessage.setStyle("color","0x000000");
			}
			
			protected function txtMessage_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				this.txtMessage.setStyle("color","0xCCCCCC");
				
			}
			
			protected function txtUserName_focusInHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				this.txtUserName.text = "";
				this.txtUserName.setStyle("color","0x000000");
				
			}
			
			protected function txtUserName_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				this.txtUserName.setStyle("color","0xCCCCCC");
				
			}		
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:HGroup width="100%" height="260" horizontalAlign="left" verticalAlign="top">
		<mx:VBox width="360" height="260">
			<s:TextArea id="txtTrace" width="360" height="180" />
			<mx:HBox width="360" height="20" verticalAlign="middle">
				<s:Label text="Your Microphone Quality" />
				<s:RadioButtonGroup id="radAudioQuality" itemClick="radAudioQuality_itemClickHandler(event)" />
				<s:RadioButton label="Low" value="low" groupName="radAudioQuality" />
				<s:RadioButton label="Medium" value="medium" groupName="radAudioQuality" />
				<s:RadioButton label="High" value="high" groupName="radAudioQuality" selected="true" />
			</mx:HBox>
			<mx:HBox width="360" height="20" verticalAlign="middle">
				<s:Label text="Your Camera Quality" />
				<s:RadioButtonGroup id="radVideoQuality" itemClick="radVideoQuality_itemClickHandler(event)" />
				<s:RadioButton label="Low" value="low" groupName="radVideoQuality" />
				<s:RadioButton label="Medium" value="medium" groupName="radVideoQuality" />
				<s:RadioButton label="High" value="high" groupName="radVideoQuality" selected="true" />
			</mx:HBox>
		</mx:VBox>
		<mx:VideoDisplay id="camVideo" width="320" height="240" />
		<s:VGroup width="150" height="240" horizontalAlign="left" verticalAlign="top">
			<s:CheckBox id="chkMuteMic" label="Mute My Microphone" change="openMuteMic()" selected="true" />
			<s:HGroup width="100%">
				<s:TextInput id="txtUserName" width="80" text="UserName" color="0xCCCCCC" focusOut="txtUserName_focusOutHandler(event)" focusIn="txtUserName_focusInHandler(event)" />
				<s:TextInput id="txtMessage" width="150" text="message" color="0xCCCCCC" focusOut="txtMessage_focusOutHandler(event)" focusIn="txtMessage_focusInHandler(event)" keyUp="txtMessage_keyUpHandler(event)" />
				<s:Button id="btnSendMsg" label="Send" click="sendMsg()" enabled="false" />
			</s:HGroup>
			<mx:RichTextEditor id="chatbox" width="360" height="180" showControlBar="false" borderStyle="none" headerHeight="0" dropShadowVisible="false" verticalScrollPolicy="off" />
		</s:VGroup>
	</s:HGroup>
	<s:Scroller width="100%" height="100%">
		<s:TileGroup id="camGroup" height="100%" width="100%" horizontalGap="5" verticalGap="5" />
	</s:Scroller>
</s:Application>